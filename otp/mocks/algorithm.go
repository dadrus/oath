// Code generated by mockery v2.23.1. DO NOT EDIT.

package mocks

import (
	otp "github.com/dadrus/oath/otp"
	mock "github.com/stretchr/testify/mock"
)

// AlgorithmMock is an autogenerated mock type for the Algorithm type
type AlgorithmMock struct {
	mock.Mock
}

type AlgorithmMock_Expecter struct {
	mock *mock.Mock
}

func (_m *AlgorithmMock) EXPECT() *AlgorithmMock_Expecter {
	return &AlgorithmMock_Expecter{mock: &_m.Mock}
}

// Export provides a mock function with given fields: exporter
func (_m *AlgorithmMock) Export(exporter otp.Exporter) {
	_m.Called(exporter)
}

// AlgorithmMock_Export_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Export'
type AlgorithmMock_Export_Call struct {
	*mock.Call
}

// Export is a helper method to define mock.On call
//   - exporter otp.Exporter
func (_e *AlgorithmMock_Expecter) Export(exporter interface{}) *AlgorithmMock_Export_Call {
	return &AlgorithmMock_Export_Call{Call: _e.mock.On("Export", exporter)}
}

func (_c *AlgorithmMock_Export_Call) Run(run func(exporter otp.Exporter)) *AlgorithmMock_Export_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(otp.Exporter))
	})
	return _c
}

func (_c *AlgorithmMock_Export_Call) Return() *AlgorithmMock_Export_Call {
	_c.Call.Return()
	return _c
}

func (_c *AlgorithmMock_Export_Call) RunAndReturn(run func(otp.Exporter)) *AlgorithmMock_Export_Call {
	_c.Call.Return(run)
	return _c
}

// Generate provides a mock function with given fields: reference
func (_m *AlgorithmMock) Generate(reference int64) string {
	ret := _m.Called(reference)

	var r0 string
	if rf, ok := ret.Get(0).(func(int64) string); ok {
		r0 = rf(reference)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// AlgorithmMock_Generate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Generate'
type AlgorithmMock_Generate_Call struct {
	*mock.Call
}

// Generate is a helper method to define mock.On call
//   - reference int64
func (_e *AlgorithmMock_Expecter) Generate(reference interface{}) *AlgorithmMock_Generate_Call {
	return &AlgorithmMock_Generate_Call{Call: _e.mock.On("Generate", reference)}
}

func (_c *AlgorithmMock_Generate_Call) Run(run func(reference int64)) *AlgorithmMock_Generate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64))
	})
	return _c
}

func (_c *AlgorithmMock_Generate_Call) Return(_a0 string) *AlgorithmMock_Generate_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AlgorithmMock_Generate_Call) RunAndReturn(run func(int64) string) *AlgorithmMock_Generate_Call {
	_c.Call.Return(run)
	return _c
}

// Validate provides a mock function with given fields: value, reference, opts
func (_m *AlgorithmMock) Validate(value string, reference int64, opts ...otp.ValidationOption) (int64, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, value, reference)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(string, int64, ...otp.ValidationOption) (int64, error)); ok {
		return rf(value, reference, opts...)
	}
	if rf, ok := ret.Get(0).(func(string, int64, ...otp.ValidationOption) int64); ok {
		r0 = rf(value, reference, opts...)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(string, int64, ...otp.ValidationOption) error); ok {
		r1 = rf(value, reference, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AlgorithmMock_Validate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Validate'
type AlgorithmMock_Validate_Call struct {
	*mock.Call
}

// Validate is a helper method to define mock.On call
//   - value string
//   - reference int64
//   - opts ...otp.ValidationOption
func (_e *AlgorithmMock_Expecter) Validate(value interface{}, reference interface{}, opts ...interface{}) *AlgorithmMock_Validate_Call {
	return &AlgorithmMock_Validate_Call{Call: _e.mock.On("Validate",
		append([]interface{}{value, reference}, opts...)...)}
}

func (_c *AlgorithmMock_Validate_Call) Run(run func(value string, reference int64, opts ...otp.ValidationOption)) *AlgorithmMock_Validate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]otp.ValidationOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(otp.ValidationOption)
			}
		}
		run(args[0].(string), args[1].(int64), variadicArgs...)
	})
	return _c
}

func (_c *AlgorithmMock_Validate_Call) Return(_a0 int64, _a1 error) *AlgorithmMock_Validate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AlgorithmMock_Validate_Call) RunAndReturn(run func(string, int64, ...otp.ValidationOption) (int64, error)) *AlgorithmMock_Validate_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewAlgorithmMock interface {
	mock.TestingT
	Cleanup(func())
}

// NewAlgorithmMock creates a new instance of AlgorithmMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewAlgorithmMock(t mockConstructorTestingTNewAlgorithmMock) *AlgorithmMock {
	mock := &AlgorithmMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
